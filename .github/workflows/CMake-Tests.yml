# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake Tests

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        build_type: [ Release, Debug ]
        c_compiler: [ gcc, cl ] # clang,
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        #          - os: ubuntu-latest
        #            c_compiler: clang
        #            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          #          - os: windows-latest
          #            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: lukka/get-cmake@latest

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          # This specifies the location of vcpkg, where it is going to be restored from cache, or create from scratch.
          vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
          # The Git commit id of vcpkg to be checked out. This is only needed because we are not using a submodule.
          vcpkgGitCommitId: '61f610845fb206298a69f708104a51d651872877'
          # The vcpkg.json file, which will be part of cache key computation.
          vcpkgJsonGlob: '${{ runner.workspace }}/vcpkg.json'

      - name: Run CMake
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          configurePresetAdditionalArgs: "['-DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}', '-DCMAKE_C_COMPILER=${{ matrix.c_compiler }}', '-DCMAKE_BUILD_TYPE=${{ matrix.build_type }}', '-DVROCKLIBS_TESTS=ON', '-DVROCKLIBS_SECURITY=ON']"
          buildPreset: 'ninja-multi-vcpkg'
          #buildPresetAdditionalArgs: "['-S ${{ github.workspace }}']"
          testPreset: 'ninja-multi-vcpkg'
          #testPresetAdditionalArgs: "['-S ${{ github.workspace }}']"



#          - name: Configure CMake
#            # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#            # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#            run: >
#              cmake -B ${{ github.workspace }}/build
#              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
#              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
#              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
#              -DVROCKLIBS_TESTS=ON
#              -DVROCKLIBS_SECURITY=ON
#              -S ${{ github.workspace }}
#
#          - name: Build
#            # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#            run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }}
#
#          - name: Test
#            working-directory: ${{ github.workspace }}/build
#            # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#            # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#            run: ctest --build-config ${{ matrix.build_type }}
