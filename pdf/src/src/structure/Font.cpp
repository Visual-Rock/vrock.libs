#include "vrock/pdf/structure/Font.hpp"

namespace vrock::pdf
{
    static std::unordered_map<std::string, FontType> font_types = { { "Type0", FontType::Type0 },
                                                                    { "Type1", FontType::Type1 },
                                                                    { "TrueType", FontType::TrueType } };

    static std::unordered_map<std::string, FontEncoding> font_encodings = {
        { "StandardEncoding", FontEncoding::StandardEncoding },
        { "MacRomanEncoding", FontEncoding::MacRomanEncoding },
        { "WinAnsiEncoding", FontEncoding::WinAnsiEncoding },
        { "PDFDocEncoding", FontEncoding::PDFDocEncoding },
        { "MacExpertEncoding", FontEncoding::MacExpertEncoding }
    };

    FontDescriptor::FontDescriptor( std::shared_ptr<PDFDictionary> dict )
    {
        if ( auto name = dict->get<PDFName>( "FontName" ) )
            font_name = name->name;
        if ( auto family = dict->get<PDFString>( "FontFamily" ) )
            font_family = family->get_data( );
        if ( auto stretch = dict->get<PDFName>( "FontStretch" ) )
            font_name = stretch->name;
        if ( auto weight = dict->get<PDFNumber>( "FontWeight" ) )
            font_weight = weight->as_int( );
        if ( auto flag = dict->get<PDFInteger>( "Flags" ) )
            flags = flag->value;
        if ( auto bbox = dict->get<PDFArray>( "FontBBox" ) )
            font_bbox = std::make_shared<Rectangle>( bbox );
        if ( auto angle = dict->get<PDFNumber>( "ItalicAngle" ) )
            italic_angle = angle->as_double( );
        if ( auto ascent = dict->get<PDFNumber>( "Ascent" ) )
            this->ascent = ascent->as_int( );
        if ( auto descent = dict->get<PDFNumber>( "Descent" ) )
            this->descent = descent->as_int( );
        if ( auto leading = dict->get<PDFNumber>( "Leading" ) )
            this->leading = leading->as_int( );
        if ( auto cap_height = dict->get<PDFNumber>( "CapHeight" ) )
            this->cap_height = cap_height->as_int( );
        if ( auto x_height = dict->get<PDFNumber>( "XHeight" ) )
            this->x_height = x_height->as_int( );
        if ( auto stem_v = dict->get<PDFNumber>( "StemV" ) )
            this->stem_v = stem_v->as_int( );
        if ( auto stem_h = dict->get<PDFNumber>( "StemH" ) )
            this->stem_h = stem_h->as_int( );
        if ( auto avg_width = dict->get<PDFNumber>( "AvgWidth" ) )
            this->avg_width = avg_width->as_int( );
        if ( auto max_width = dict->get<PDFNumber>( "MaxWidth" ) )
            this->max_width = max_width->as_int( );
        if ( auto missing_width = dict->get<PDFNumber>( "MissingWidth" ) )
            this->missing_width = missing_width->as_int( );
        if ( auto file = dict->get<PDFStream>( "FontFile" ) )
            font_file = file;
        if ( auto file2 = dict->get<PDFStream>( "FontFile2" ) )
            font_file2 = file2;
        if ( auto file3 = dict->get<PDFStream>( "FontFile3" ) )
            font_file3 = file3;
        if ( auto charset = dict->get<PDFString>( "CharSet" ) )
            char_set = charset;
    }

    Font::Font( std::shared_ptr<PDFDictionary> dict )
    {
        if ( auto type = dict->get<PDFName>( "Subtype" ) )
            if ( font_types.contains( type->name ) )
                font_type = font_types[ type->name ];

        if ( auto first = dict->get<PDFInteger>( "FirstChar" ) )
            first_char = first->value;
        if ( auto last = dict->get<PDFInteger>( "LastChar" ) )
            last_char = last->value;
        if ( auto base = dict->get<PDFName>( "BaseFont" ) )
            base_font = base->name;
        if ( auto name = dict->get<PDFName>( "Name" ) )
            font_name = name->name;
        if ( auto encoding = dict->get<PDFName>( "Encoding" ) )
            if ( font_encodings.contains( encoding->name ) )
                this->encoding = font_encodings[ encoding->name ];
        if ( auto descriptor = dict->get<PDFDictionary>( "FontDescriptor" ) )
            this->descriptor = std::make_shared<FontDescriptor>( descriptor );
        if ( auto to_unicode = dict->get<PDFStream>( "ToUnicode" ) )
            this->to_unicode = parse_cmap( to_unicode->data );

        if ( auto w = dict->get<PDFArray>( "Widths" ) )
        {
            widths.reserve( w->value.size( ) );
            for ( const auto &v : w->value )
                if ( auto val = v->to<PDFInteger>( ) )
                    widths.emplace_back( val->value );
        }
    }

    auto Font::to_font_encoding( std::string_view str ) -> std::string
    {
        return convert_to_font_encoding( shared_from_this( ), str );
    }

    auto Font::get_length( std::string_view str ) -> Unit
    {
        auto converted = to_font_encoding( str );
        std::size_t length = 0;
        for ( const unsigned char c : converted )
        {
            if ( c - first_char > last_char )
            {
                log::get_logger( "pdf" )->error( "Character '{}' out of range", c );
                continue;
            }
            length += widths[ c - first_char ];
        }
        return Unit( length / 1000.0f );
    }

    std::unordered_map<std::string, char> to_standard = {
        { "A", 0101 },  { "Æ", 0341 }, { "Á", 00 },   { "Â", 00 },   { "Ä", 00 },   { "À", 00 },   { "Å", 00 },
        { "Ã", 00 },    { "B", 0102 }, { "C", 0103 }, { "Ç", 00 },   { "D", 0104 }, { "E", 0105 }, { "É", 00 },
        { "Ê", 00 },    { "Ë", 00 },   { "È", 00 },   { "Ð", 00 },   { "€", 00 },   { "F", 0106 }, { "G", 0107 },
        { "H", 0110 },  { "I", 0111 }, { "Í", 00 },   { "Î", 00 },   { "Ï", 00 },   { "Ì", 00 },   { "J", 0112 },
        { "K", 0113 },  { "L", 0114 }, { "Ł", 0350 }, { "M", 0115 }, { "N", 0116 }, { "Ñ", 00 },   { "O", 0117 },
        { "Œ", 0352 },  { "Ó", 00 },   { "Ô", 00 },   { "Ö", 00 },   { "Ò", 00 },   { "Ø", 0351 }, { "Õ", 00 },
        { "P", 0120 },  { "Q", 0121 }, { "R", 0122 }, { "S", 0123 }, { "Š", 00 },   { "T", 0124 }, { "Þ", 00 },
        { "U", 0125 },  { "Ú", 00 },   { "Û", 00 },   { "Ü", 00 },   { "Ù", 00 },   { "V", 0126 }, { "W", 0127 },
        { "X", 0130 },  { "Y", 0131 }, { "Ý", 00 },   { "Ÿ", 00 },   { "Z", 0132 }, { "Ž", 00 },   { "a", 0141 },
        { "á", 00 },    { "â", 00 },   { " ́", 0302 }, { "ä", 00 },   { "æ", 0361 }, { "à", 00 },   { "&", 046 },
        { "å", 00 },    { "^", 0136 }, { "~", 0176 }, { "*", 052 },  { "@", 0100 }, { "ã", 00 },   { "b", 0142 },
        { "\\", 0134 }, { "|", 0174 }, { "{", 0173 }, { "}", 0175 }, { "[", 0133 }, { "]", 0135 }, { " ̆", 0306 },
        { "¦", 00 },    { "•", 0267 }, { "c", 0143 }, { "ˇ", 0317 }, { "ç", 00 },   { " ̧", 0313 }, { "¢", 0242 },
        { "ˆ", 0303 },  { ":", 072 },  { ",", 054 },  { "©", 00 },   { "¤", 0250 }, { "d", 0144 }, { "†", 0262 },
        { "‡", 0263 },  { "°", 00 },   { " ̈", 0310 }, { "÷", 00 },   { "$", 044 },  { " ̇", 0307 }, { "ı", 0365 },
        { "e", 0145 },  { "é", 00 },   { "ê", 00 },   { "ë", 00 },   { "è", 00 },   { "8", 070 },  { "…", 0274 },
        { "—", 0320 },  { "–", 0261 }, { "=", 075 },  { "ð", 00 },   { "!", 041 },  { "¡", 0241 }, { "f", 0146 },
        { "ﬁ", 0256 },  { "5", 065 },  { "ﬂ", 0257 }, { "ƒ", 0246 }, { "4", 064 },  { "⁄", 0244 }, { "g", 0147 },
        { "ß", 0373 },  { "`", 0301 }, { ">", 076 },  { "«", 0253 }, { "»", 0310 }, { "‹", 0254 }, { "›", 0255 },
        { "h", 0150 },  { " ̋", 0315 }, { "-", 055 },  { "i", 0151 }, { "í", 00 },   { "î", 00 },   { "ï", 00 },
        { "ì", 00 },    { "j", 0152 }, { "k", 0153 }, { "l", 0154 }, { "<", 074 },  { "¬", 00 },   { "ł", 0370 },
        { "m", 0155 },  { " ̄", 0305 }, { "−", 00 },   { "μ", 00 },   { "×", 00 },   { "n", 0156 }, { "9", 071 },
        { "ñ", 00 },    { "#", 043 },  { "o", 0157 }, { "ó", 00 },   { "ô", 00 },   { "ö", 00 },   { "œ", 0372 },
        { " ̨", 0316 },  { "ò", 00 },   { "1", 061 },  { "½", 00 },   { "¼", 00 },   { "1", 00 },   { "a", 0343 },
        { "o", 0353 },  { "ø", 0371 }, { "õ", 00 },   { "p", 0160 }, { "¶", 0266 }, { "(", 050 },  { ")", 051 },
        { "%", 045 },   { ".", 056 },  { "·", 0264 }, { "‰", 0275 }, { "+", 053 },  { "±", 00 },   { "q", 0161 },
        { "?", 077 },   { "¿", 0277 }, { "\"", 042 }, { "„", 0271 }, { "“", 0252 }, { "”", 0272 }, { "‘", 0140 },
        { "’", 047 },   { "‚", 0270 }, { "'", 0251 }, { "r", 0162 }, { "®", 00 },   { " ̊", 0312 }, { "s", 0163 },
        { "š", 00 },    { "§", 0247 }, { ";", 073 },  { "7", 067 },  { "6", 066 },  { "/", 057 },  { " ", 040 },
        { "£", 0243 },  { "t", 0164 }, { "þ", 00 },   { "3", 063 },  { "¾", 00 },   { "3", 00 },   { " ̃", 0304 },
        { "™", 00 },    { "2", 062 },  { "2", 00 },   { "u", 0165 }, { "ú", 00 },   { "û", 00 },   { "ü", 00 },
        { "ù", 00 },    { "_", 0137 }, { "v", 0166 }, { "w", 0167 }, { "x", 0170 }, { "y", 0171 }, { "ý", 00 },
        { "ÿ", 00 },    { "¥", 0245 }, { "z", 0172 }, { "ž", 00 },   { "0", 060 },
    };

    std::unordered_map<std::string, char> to_mac_roman = {
        { "A", 0101 },  { "Æ", 0256 }, { "Á", 0347 }, { "Â", 0345 }, { "Ä", 0200 }, { "À", 0313 }, { "Å", 0201 },
        { "Ã", 0314 },  { "B", 0102 }, { "C", 0103 }, { "Ç", 0202 }, { "D", 0104 }, { "E", 0105 }, { "É", 0203 },
        { "Ê", 0346 },  { "Ë", 0350 }, { "È", 0351 }, { "Ð", 00 },   { "€", 00 },   { "F", 0106 }, { "G", 0107 },
        { "H", 0110 },  { "I", 0111 }, { "Í", 0352 }, { "Î", 0353 }, { "Ï", 0354 }, { "Ì", 0355 }, { "J", 0112 },
        { "K", 0113 },  { "L", 0114 }, { "Ł", 00 },   { "M", 0115 }, { "N", 0116 }, { "Ñ", 0204 }, { "O", 0117 },
        { "Œ", 0316 },  { "Ó", 0356 }, { "Ô", 0357 }, { "Ö", 0205 }, { "Ò", 0361 }, { "Ø", 0257 }, { "Õ", 0315 },
        { "P", 0120 },  { "Q", 0121 }, { "R", 0122 }, { "S", 0123 }, { "Š", 00 },   { "T", 0124 }, { "Þ", 00 },
        { "U", 0125 },  { "Ú", 0362 }, { "Û", 0363 }, { "Ü", 0206 }, { "Ù", 0364 }, { "V", 0126 }, { "W", 0127 },
        { "X", 0130 },  { "Y", 0131 }, { "Ý", 00 },   { "Ÿ", 0331 }, { "Z", 0132 }, { "Ž", 00 },   { "a", 0141 },
        { "á", 0207 },  { "â", 0211 }, { " ́", 0253 }, { "ä", 0212 }, { "æ", 0276 }, { "à", 0210 }, { "&", 046 },
        { "å", 0214 },  { "^", 0136 }, { "~", 0176 }, { "*", 052 },  { "@", 0100 }, { "ã", 0213 }, { "b", 0142 },
        { "\\", 0134 }, { "|", 0174 }, { "{", 0173 }, { "}", 0175 }, { "[", 0133 }, { "]", 0135 }, { " ̆", 0371 },
        { "¦", 00 },    { "•", 0245 }, { "c", 0143 }, { "ˇ", 0377 }, { "ç", 0215 }, { " ̧", 0374 }, { "¢", 0242 },
        { "ˆ", 0366 },  { ":", 072 },  { ",", 054 },  { "©", 0251 }, { "¤", 0333 }, { "d", 0144 }, { "†", 0240 },
        { "‡", 0340 },  { "°", 0241 }, { " ̈", 0254 }, { "÷", 0326 }, { "$", 044 },  { " ̇", 0372 }, { "ı", 0365 },
        { "e", 0145 },  { "é", 0216 }, { "ê", 0220 }, { "ë", 0221 }, { "è", 0217 }, { "8", 070 },  { "…", 0311 },
        { "—", 0321 },  { "–", 0320 }, { "=", 075 },  { "ð", 00 },   { "!", 041 },  { "¡", 0301 }, { "f", 0146 },
        { "ﬁ", 0336 },  { "5", 065 },  { "ﬂ", 0337 }, { "ƒ", 0304 }, { "4", 064 },  { "⁄", 0332 }, { "g", 0147 },
        { "ß", 0247 },  { "`", 0140 }, { ">", 076 },  { "«", 0307 }, { "»", 0273 }, { "‹", 0334 }, { "›", 0335 },
        { "h", 0150 },  { " ̋", 0375 }, { "-", 055 },  { "i", 0151 }, { "í", 0222 }, { "î", 0224 }, { "ï", 0225 },
        { "ì", 0223 },  { "j", 0152 }, { "k", 0153 }, { "l", 0154 }, { "<", 074 },  { "¬", 0302 }, { "ł", 00 },
        { "m", 0155 },  { " ̄", 0370 }, { "−", 00 },   { "μ", 0265 }, { "×", 00 },   { "n", 0156 }, { "9", 071 },
        { "ñ", 0226 },  { "#", 043 },  { "o", 0157 }, { "ó", 0227 }, { "ô", 0231 }, { "ö", 0232 }, { "œ", 0317 },
        { " ̨", 0376 },  { "ò", 0230 }, { "1", 061 },  { "½", 00 },   { "¼", 00 },   { "1", 00 },   { "a", 0273 },
        { "o", 0274 },  { "ø", 0277 }, { "õ", 0233 }, { "p", 0160 }, { "¶", 0246 }, { "(", 050 },  { ")", 051 },
        { "%", 045 },   { ".", 056 },  { "·", 0341 }, { "‰", 0344 }, { "+", 053 },  { "±", 0261 }, { "q", 0161 },
        { "?", 077 },   { "¿", 0300 }, { "\"", 042 }, { "„", 0343 }, { "“", 0322 }, { "”", 0323 }, { "‘", 0324 },
        { "’", 0325 },  { "‚", 0342 }, { "'", 047 },  { "r", 0162 }, { "®", 0250 }, { " ̊", 0373 }, { "s", 0163 },
        { "š", 00 },    { "§", 0244 }, { ";", 073 },  { "7", 067 },  { "6", 066 },  { "/", 057 },  { " ", 040 },
        { "£", 0243 },  { "t", 0164 }, { "þ", 00 },   { "3", 063 },  { "¾", 00 },   { "3", 00 },   { " ̃", 0367 },
        { "™", 0252 },  { "2", 062 },  { "2", 00 },   { "u", 0165 }, { "ú", 0234 }, { "û", 0236 }, { "ü", 0237 },
        { "ù", 0235 },  { "_", 0137 }, { "v", 0166 }, { "w", 0167 }, { "x", 0170 }, { "y", 0171 }, { "ý", 00 },
        { "ÿ", 0330 },  { "¥", 0264 }, { "z", 0172 }, { "ž", 00 },   { "0", 060 },
    };

    std::unordered_map<std::string, char> to_win_ansi = {
        { "A", 0101 },  { "Æ", 0306 }, { "Á", 0301 }, { "Â", 0302 }, { "Ä", 0304 }, { "À", 0300 }, { "Å", 0305 },
        { "Ã", 0303 },  { "B", 0102 }, { "C", 0103 }, { "Ç", 0307 }, { "D", 0104 }, { "E", 0105 }, { "É", 0311 },
        { "Ê", 0312 },  { "Ë", 0313 }, { "È", 0310 }, { "Ð", 0320 }, { "€", 0200 }, { "F", 0106 }, { "G", 0107 },
        { "H", 0110 },  { "I", 0111 }, { "Í", 0315 }, { "Î", 0316 }, { "Ï", 0317 }, { "Ì", 0314 }, { "J", 0112 },
        { "K", 0113 },  { "L", 0114 }, { "Ł", 00 },   { "M", 0115 }, { "N", 0116 }, { "Ñ", 0321 }, { "O", 0117 },
        { "Œ", 0214 },  { "Ó", 0323 }, { "Ô", 0324 }, { "Ö", 0326 }, { "Ò", 0322 }, { "Ø", 0330 }, { "Õ", 0325 },
        { "P", 0120 },  { "Q", 0121 }, { "R", 0122 }, { "S", 0123 }, { "Š", 0212 }, { "T", 0124 }, { "Þ", 0336 },
        { "U", 0125 },  { "Ú", 0332 }, { "Û", 0333 }, { "Ü", 0334 }, { "Ù", 0331 }, { "V", 0126 }, { "W", 0127 },
        { "X", 0130 },  { "Y", 0131 }, { "Ý", 0335 }, { "Ÿ", 0237 }, { "Z", 0132 }, { "Ž", 0216 }, { "a", 0141 },
        { "á", 0341 },  { "â", 0342 }, { " ́", 0264 }, { "ä", 0344 }, { "æ", 0346 }, { "à", 0340 }, { "&", 046 },
        { "å", 0345 },  { "^", 0136 }, { "~", 0176 }, { "*", 052 },  { "@", 0100 }, { "ã", 0343 }, { "b", 0142 },
        { "\\", 0134 }, { "|", 0174 }, { "{", 0173 }, { "}", 0175 }, { "[", 0133 }, { "]", 0135 }, { " ̆", 00 },
        { "¦", 0246 },  { "•", 0225 }, { "c", 0143 }, { "ˇ", 00 },   { "ç", 0347 }, { " ̧", 0270 }, { "¢", 0242 },
        { "ˆ", 0210 },  { ":", 072 },  { ",", 054 },  { "©", 0251 }, { "¤", 0244 }, { "d", 0144 }, { "†", 0206 },
        { "‡", 0207 },  { "°", 0260 }, { " ̈", 0250 }, { "÷", 0367 }, { "$", 044 },  { " ̇", 00 },   { "ı", 00 },
        { "e", 0145 },  { "é", 0351 }, { "ê", 0352 }, { "ë", 0353 }, { "è", 0350 }, { "8", 070 },  { "…", 0205 },
        { "—", 0227 },  { "–", 0226 }, { "=", 075 },  { "ð", 0360 }, { "!", 041 },  { "¡", 0241 }, { "f", 0146 },
        { "ﬁ", 00 },    { "5", 065 },  { "ﬂ", 00 },   { "ƒ", 0203 }, { "4", 064 },  { "⁄", 00 },   { "g", 0147 },
        { "ß", 0337 },  { "`", 0140 }, { ">", 076 },  { "«", 0253 }, { "»", 0273 }, { "‹", 0213 }, { "›", 0233 },
        { "h", 0150 },  { " ̋", 00 },   { "-", 055 },  { "i", 0151 }, { "í", 0355 }, { "î", 0356 }, { "ï", 0357 },
        { "ì", 0354 },  { "j", 0152 }, { "k", 0153 }, { "l", 0154 }, { "<", 074 },  { "¬", 0254 }, { "ł", 00 },
        { "m", 0155 },  { " ̄", 0257 }, { "−", 00 },   { "μ", 0265 }, { "×", 0327 }, { "n", 0156 }, { "9", 071 },
        { "ñ", 0361 },  { "#", 043 },  { "o", 0157 }, { "ó", 0363 }, { "ô", 0364 }, { "ö", 0366 }, { "œ", 0234 },
        { " ̨", 00 },    { "ò", 0362 }, { "1", 061 },  { "½", 0275 }, { "¼", 0274 }, { "1", 0271 }, { "a", 0252 },
        { "o", 0272 },  { "ø", 0370 }, { "õ", 0365 }, { "p", 0160 }, { "¶", 0266 }, { "(", 050 },  { ")", 051 },
        { "%", 045 },   { ".", 056 },  { "·", 0267 }, { "‰", 0211 }, { "+", 053 },  { "±", 0261 }, { "q", 0161 },
        { "?", 077 },   { "¿", 0277 }, { "\"", 042 }, { "„", 0204 }, { "“", 0223 }, { "”", 0224 }, { "‘", 0221 },
        { "’", 0222 },  { "‚", 0202 }, { "'", 047 },  { "r", 0162 }, { "®", 0256 }, { " ̊", 00 },   { "s", 0163 },
        { "š", 0232 },  { "§", 0247 }, { ";", 073 },  { "7", 067 },  { "6", 066 },  { "/", 057 },  { " ", 040 },
        { "£", 0243 },  { "t", 0164 }, { "þ", 0376 }, { "3", 063 },  { "¾", 0276 }, { "3", 0263 }, { " ̃", 0230 },
        { "™", 0231 },  { "2", 062 },  { "2", 0262 }, { "u", 0165 }, { "ú", 0372 }, { "û", 0373 }, { "ü", 0374 },
        { "ù", 0371 },  { "_", 0137 }, { "v", 0166 }, { "w", 0167 }, { "x", 0170 }, { "y", 0171 }, { "ý", 0375 },
        { "ÿ", 0377 },  { "¥", 0245 }, { "z", 0172 }, { "ž", 0236 }, { "0", 060 },
    };

    std::unordered_map<std::string, char> to_pdf_encoding = {
        { "A", 0101 },  { "Æ", 0306 }, { "Á", 0301 }, { "Â", 0302 }, { "Ä", 0304 }, { "À", 0300 }, { "Å", 0305 },
        { "Ã", 0303 },  { "B", 0102 }, { "C", 0103 }, { "Ç", 0307 }, { "D", 0104 }, { "E", 0105 }, { "É", 0311 },
        { "Ê", 0312 },  { "Ë", 0313 }, { "È", 0310 }, { "Ð", 0320 }, { "€", 0240 }, { "F", 0106 }, { "G", 0107 },
        { "H", 0110 },  { "I", 0111 }, { "Í", 0315 }, { "Î", 0316 }, { "Ï", 0317 }, { "Ì", 0314 }, { "J", 0112 },
        { "K", 0113 },  { "L", 0114 }, { "Ł", 0225 }, { "M", 0115 }, { "N", 0116 }, { "Ñ", 0321 }, { "O", 0117 },
        { "Œ", 0226 },  { "Ó", 0323 }, { "Ô", 0324 }, { "Ö", 0326 }, { "Ò", 0322 }, { "Ø", 0330 }, { "Õ", 0325 },
        { "P", 0120 },  { "Q", 0121 }, { "R", 0122 }, { "S", 0123 }, { "Š", 0227 }, { "T", 0124 }, { "Þ", 0336 },
        { "U", 0125 },  { "Ú", 0332 }, { "Û", 0333 }, { "Ü", 0334 }, { "Ù", 0331 }, { "V", 0126 }, { "W", 0127 },
        { "X", 0130 },  { "Y", 0131 }, { "Ý", 0335 }, { "Ÿ", 0230 }, { "Z", 0132 }, { "Ž", 0231 }, { "a", 0141 },
        { "á", 0341 },  { "â", 0342 }, { "́", 0264 },  { "ä", 0344 }, { "æ", 0346 }, { "à", 0340 }, { "&", 046 },
        { "å", 0345 },  { "^", 0136 }, { "~", 0176 }, { "*", 052 },  { "@", 0100 }, { "ã", 0343 }, { "b", 0142 },
        { "\\", 0134 }, { "|", 0174 }, { "{", 0173 }, { "}", 0175 }, { "[", 0133 }, { "]", 0135 }, { "̆", 030 },
        { "¦", 0246 },  { "•", 0200 }, { "c", 0143 }, { "ˇ", 031 },  { "ç", 0347 }, { "̧", 0270 },  { "¢", 0242 },
        { "ˆ", 032 },   { ":", 072 },  { ",", 054 },  { "©", 0251 }, { "¤", 0244 }, { "d", 0144 }, { "†", 0201 },
        { "‡", 0202 },  { "°", 0260 }, { "̈", 0250 },  { "÷", 0367 }, { "$", 044 },  { "̇", 033 },   { "ı", 0232 },
        { "e", 0145 },  { "é", 0351 }, { "ê", 0352 }, { "ë", 0353 }, { "è", 0350 }, { "8", 070 },  { "…", 0203 },
        { "—", 0204 },  { "–", 0205 }, { "=", 075 },  { "ð", 0360 }, { "!", 041 },  { "¡", 0241 }, { "f", 0146 },
        { "ﬁ", 0223 },  { "5", 065 },  { "ﬂ", 0224 }, { "ƒ", 0206 }, { "4", 064 },  { "⁄", 0207 }, { "g", 0147 },
        { "ß", 0337 },  { "`", 0140 }, { ">", 076 },  { "«", 0253 }, { "»", 0273 }, { "‹", 0210 }, { "›", 0211 },
        { "h", 0150 },  { "̋", 034 },   { "-", 055 },  { "i", 0151 }, { "í", 0355 }, { "î", 0356 }, { "ï", 0357 },
        { "ì", 0354 },  { "j", 0152 }, { "k", 0153 }, { "l", 0154 }, { "<", 074 },  { "¬", 0254 }, { "ł", 0233 },
        { "m", 0155 },  { "̄", 0257 },  { "−", 0212 }, { "μ", 0265 }, { "×", 0327 }, { "n", 0156 }, { "9", 071 },
        { "ñ", 0361 },  { "#", 043 },  { "o", 0157 }, { "ó", 0363 }, { "ô", 0364 }, { "ö", 0366 }, { "œ", 0234 },
        { "̨", 035 },    { "ò", 0362 }, { "1", 061 },  { "½", 0275 }, { "¼", 0274 }, { "1", 0271 }, { "a", 0252 },
        { "o", 0272 },  { "ø", 0370 }, { "õ", 0365 }, { "p", 0160 }, { "¶", 0266 }, { "(", 050 },  { ")", 051 },
        { "%", 045 },   { ".", 056 },  { "·", 0267 }, { "‰", 0213 }, { "+", 053 },  { "±", 0261 }, { "q", 0161 },
        { "?", 077 },   { "¿", 0277 }, { "\"", 042 }, { "„", 0214 }, { "“", 0215 }, { "”", 0216 }, { "‘", 0217 },
        { "’", 0220 },  { "‚", 0221 }, { "'", 047 },  { "r", 0162 }, { "®", 0256 }, { "̊", 036 },   { "s", 0163 },
        { "š", 0235 },  { "§", 0247 }, { ";", 073 },  { "7", 067 },  { "6", 066 },  { "/", 057 },  { "0", 40 },
        { "£", 0243 },  { "t", 0164 }, { "þ", 0376 }, { "3", 063 },  { "¾", 0276 }, { "3", 0263 }, { "̃", 037 },
        { "™", 0222 },  { "2", 062 },  { "2", 0262 }, { "u", 0165 }, { "ú", 0372 }, { "û", 0373 }, { "ü", 0374 },
        { "ù", 0371 },  { "_", 0137 }, { "v", 0166 }, { "w", 0167 }, { "x", 0170 }, { "y", 0171 }, { "ý", 0375 },
        { "ÿ", 0377 },  { "¥", 0245 }, { "z", 0172 }, { "ž", 0236 }, { "0", 060 }
    };

    auto convert_to_font_encoding( std::shared_ptr<Font> font, std::string_view str ) -> std::string
    {
        std::string result;
        result.resize( str.size( ) );

        switch ( font->encoding )
        {
        case FontEncoding::MacRomanEncoding: {
            for ( const auto c : str )
            {
                if ( to_mac_roman.contains( std::string( 1, c ) ) )
                    result.push_back( to_mac_roman[ std::string( 1, c ) ] );
                else
                    result.push_back( c );
            }
            break;
        }
        case FontEncoding::WinAnsiEncoding: {
            int i = 0;
            for ( const auto c : str )
            {
                if ( to_win_ansi.contains( std::string( 1, c ) ) )
                    result[ i++ ] = to_win_ansi[ std::string( 1, c ) ];
                else
                    result[ i++ ] = c;
            }
            break;
        }
        case FontEncoding::PDFDocEncoding: {
            for ( const auto c : str )
            {
                if ( to_win_ansi.contains( std::string( 1, c ) ) )
                    result.push_back( static_cast<char>(to_pdf_encoding[ std::string( 1, c ) ]) );
                else
                    result.push_back( c );
            }break;
        }
        default:
            log::get_logger( "pdf" )->error( "Fontencoding {}", std::to_underlying( font->encoding ) );
            result = std::string(str);
        }

        return result;
    }
} // namespace vrock::pdf